// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  name            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  orders          Order[]
  userPreferences UserPreferences[]
  review          Review[]

  @@map("user")
}

model Book {
  id              Int         @id @default(autoincrement())
  title           String
  author          String
  description     String?
  price           Float
  stockQuantity   Int
  publicationDate DateTime
  coverImageUrl   String?
  categoryId      Int
  category        Category    @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  reviewId        String?
  review          Review[]
}

model Review {
  id        String   @id @default(uuid())
  rating    String
  text      String
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  books           Book[]
  UserPreferences UserPreferences[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  orderId  Int
  bookId   Int
  quantity Int
  price    Float
  order    Order @relation(fields: [orderId], references: [id])
  book     Book  @relation(fields: [bookId], references: [id])
}

model UserPreferences {
  id         Int      @id @default(autoincrement())
  userId     String
  categoryId Int
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
